description = 'oncoming vehicle changing lanes'

# Get all vehicles
vehicles = get_objects_of_category(log_dir, category='VEHICLE')

# Get moving vehicles (not parked/stationary)
moving_vehicles = scenario_not(stationary)(vehicles, log_dir)

# Get vehicles that are in front of the ego vehicle
oncoming_vehicles = get_objects_in_relative_direction(
    moving_vehicles, 
    moving_vehicles, 
    log_dir, 
    direction='forward'
)

# Find vehicles that are changing lanes
lane_changing = changing_lanes(oncoming_vehicles, log_dir)

# Combine requirements - must be both oncoming and changing lanes
oncoming_lane_changers = scenario_and([oncoming_vehicles, lane_changing])

output_scenario(oncoming_lane_changers, description, log_dir, output_dir)