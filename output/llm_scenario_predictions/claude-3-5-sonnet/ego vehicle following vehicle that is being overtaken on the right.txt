description = 'ego vehicle following vehicle that is being overtaken on the right'

# Get ego vehicle and regular vehicles
ego = get_objects_of_category(log_dir, category='EGO_VEHICLE')
vehicles = get_objects_of_category(log_dir, category='VEHICLE')

# Get moving vehicles (exclude parked/stationary)
moving_vehicles = scenario_not(stationary)(vehicles, log_dir)

# Find vehicles being overtaken on the right by other vehicles
# Being overtaken means another vehicle crosses from behind to in front on the right side
# Using 10m forward threshold and 5m lateral threshold for the crossing detection
vehicles_being_overtaken = being_crossed_by(moving_vehicles, moving_vehicles, log_dir, 
                                          direction='right', forward_thresh=10, lateral_thresh=5)

# Find vehicles that the ego vehicle is following
# Looking for vehicles within 25m in front of ego vehicle
vehicles_followed_by_ego = get_objects_in_relative_direction(ego, moving_vehicles, log_dir,
                                                           direction='forward', 
                                                           max_number=1,
                                                           within_distance=25)

# Get the intersection of vehicles being overtaken and vehicles being followed by ego
target_vehicles = scenario_and([vehicles_being_overtaken, vehicles_followed_by_ego])

output_scenario(target_vehicles, description, log_dir, output_dir)