description = 'bicycle between two vehicles traveling in same direction'

# Get all bicycles and vehicles
bicycles = get_objects_of_category(log_dir, category='BICYCLE') 
vehicles = get_objects_of_category(log_dir, category='VEHICLE')

# Only consider moving bicycles and vehicles
moving_bicycles = scenario_not(stationary)(bicycles, log_dir)
moving_vehicles = scenario_not(stationary)(vehicles, log_dir)

# Find vehicles that are in front of the bicycle within 15m
vehicles_in_front = get_objects_in_relative_direction(
    moving_bicycles, 
    moving_vehicles, 
    log_dir,
    direction='forward',
    max_number=1,
    within_distance=15,
    lateral_thresh=2
)

# Find bicycles that have a vehicle behind them within 15m
bicycles_with_vehicle_behind = has_objects_in_relative_direction(
    moving_bicycles,
    moving_vehicles,
    log_dir, 
    direction='backward',
    min_number=1,
    max_number=1,
    within_distance=15,
    lateral_thresh=2
)

# Bicycle must have both a vehicle in front and behind
bicycles_between_vehicles = scenario_and([
    vehicles_in_front,
    bicycles_with_vehicle_behind
])

# All vehicles must be in the same lane
bicycles_between_vehicles_same_lane = in_same_lane(
    bicycles_between_vehicles,
    moving_vehicles,
    log_dir
)

output_scenario(bicycles_between_vehicles_same_lane, description, log_dir, output_dir)