description = 'ego vehicle with box truck ahead and motorcycle behind'

# Get the relevant object categories
ego = get_objects_of_category(log_dir, category='EGO_VEHICLE')
box_trucks = get_objects_of_category(log_dir, category='BOX_TRUCK')
motorcycles = get_objects_of_category(log_dir, category='MOTORCYCLE')

# Find box trucks that are in front of ego vehicle
# Using 30m as a reasonable following distance threshold
box_trucks_ahead = get_objects_in_relative_direction(
    ego, 
    box_trucks, 
    log_dir, 
    direction='forward',
    max_number=1,
    within_distance=30
)

# Find motorcycles behind ego vehicle that have ego vehicle ahead of them
# Using same 30m threshold for consistency
motorcycles_behind = get_objects_in_relative_direction(
    ego,
    motorcycles, 
    log_dir,
    direction='backward',
    max_number=1, 
    within_distance=30
)

# Ego vehicle must have both a box truck ahead AND motorcycle behind
ego_between_vehicles = has_objects_in_relative_direction(
    has_objects_in_relative_direction(
        ego,
        box_trucks,
        log_dir,
        direction='forward',
        min_number=1,
        max_number=1,
        within_distance=30
    ),
    motorcycles,
    log_dir, 
    direction='backward',
    min_number=1,
    max_number=1,
    within_distance=30
)

output_scenario(ego_between_vehicles, description, log_dir, output_dir, is_gt=False)